{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction a sample tutorial developing nodejs and deploy it to IBM Cloud Private 3.2.0 which is based on Kubernetes.","title":"Introduction"},{"location":"#introduction","text":"a sample tutorial developing nodejs and deploy it to IBM Cloud Private 3.2.0 which is based on Kubernetes.","title":"Introduction"},{"location":"hands-on/","text":"Introduction In this hands on exercise, you will learn how to build a docker image how to push an image to a private repo how to deploy an container in kubernetes platform About the application this is a nodejs application that calls httpbin.org API and you can then use Clone the project which contains the nodeJS that call service in httpbin.org On your machine ensure you have your pre-requisite installed test the application npm install npm test build the image docker build . -t <image-name>:<image-tag> test the image docker run -e CONTAINER_PORT='3000' -e TARGET_URL='https://httpbin.org/' -e TARGET_URI='delay/1' -p 5000:3000 js-httpbin:2.0 <image-name>:<image-tag> tag the image for ICP docker tag js-httpbin:2.0 mycluster.icp:8500/<namespace>/<image-name>:<image-tag> push the image to kubernetes platform edit /etc/hosts to map mycluster.icp to ICP IP address and configure docker to use insecure login docker login mycluster.icp:8500 docker push mycluster.icp:8500/<namespace>/<image-name>:<image-tag> run the image kubectl apply -f ./k8s/httpbin.yaml Further exercise modify the application tag image new version test it push image to kubernetes platform scale it update the application to new version of image rollback","title":"Hands-on"},{"location":"hands-on/#introduction","text":"In this hands on exercise, you will learn how to build a docker image how to push an image to a private repo how to deploy an container in kubernetes platform","title":"Introduction"},{"location":"hands-on/#about-the-application","text":"this is a nodejs application that calls httpbin.org API and you can then use Clone the project which contains the nodeJS that call service in httpbin.org","title":"About the application"},{"location":"hands-on/#on-your-machine","text":"ensure you have your pre-requisite installed test the application npm install npm test build the image docker build . -t <image-name>:<image-tag> test the image docker run -e CONTAINER_PORT='3000' -e TARGET_URL='https://httpbin.org/' -e TARGET_URI='delay/1' -p 5000:3000 js-httpbin:2.0 <image-name>:<image-tag> tag the image for ICP docker tag js-httpbin:2.0 mycluster.icp:8500/<namespace>/<image-name>:<image-tag> push the image to kubernetes platform edit /etc/hosts to map mycluster.icp to ICP IP address and configure docker to use insecure login docker login mycluster.icp:8500 docker push mycluster.icp:8500/<namespace>/<image-name>:<image-tag> run the image kubectl apply -f ./k8s/httpbin.yaml","title":"On your machine"},{"location":"hands-on/#further-exercise","text":"modify the application tag image new version test it push image to kubernetes platform scale it update the application to new version of image rollback","title":"Further exercise"},{"location":"prepare/","text":"Development environment Level: Beginner Ensure your development environment has the following docker where you can build, run, push/pull images install node and npm IBM Cloud Private tools install cloudctl install kubectl In this tutorial, we will be doing our docker development on Ubuntun 18.04 and we will create a ubuntu VM on your machine host using multipass. the tutorial can be performed on Mac host too. for Windows users, you will need to install multipass and provision a Ubuntu 18.04 VM with multipass. Verify your setup node -v npm -v Ubuntu Linux Setup for Windows download Windows multipass, head over to here . Installing Multipass for Windows Ubuntu Linux Setup for Macs download Macs multipass, head over to here . to create a default Ubuntu with - name: linux-vm - cpu : 4 cores - memory: 8GB - disk: 40 GB run the following command, and it will create a VM spec as of above. multipass launch -n linux-vm -m 8G -d 40G -c 4 vm info to find info about VMs multipass list get into vm shell to access the shell of Ubuntu VM multipass shell linux-vm install docker update existing package sudo apt update && sudo apt upgrade install a few prerequisite packages which let apt use packages over HTTPS sudo apt install apt-transport-https ca-certificates curl software-properties-common add the GPG key for the official Docker repository to your system curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Add the Docker repository to APT sources sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" update the package database with the Docker packages from the newly added repo sudo apt update && sudo apt upgrade Make sure you are about to install from the Docker repo instead of the default Ubuntu repo apt-cache policy docker-ce install Docker sudo apt install docker-ce check Docker status sudo systemctl status docker check docker version docker version add your user for running docker commands sudo usermod -aG docker ${USER} to confirm user has been added id -nG Install Nodejs and NPM Install Nodejs from the repositories sudo apt install nodejs Uninstall Nodejs sudo apt remove nodejs we will install nodejs version 10.16.2 we will download a script nodesource_setup.sh for a specific version of nodejs then run the downloaded script where PPA will be added to your configuration and your local package cache will be updated. nodejs package contains the nodejs binary as well as npm, so you don't need to install npm separately. cd ~ curl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh sudo bash nodesource_setup.sh sudo apt install nodejs -y node -v npm -v for some npm packages to work (those that require compiling code from source, for example), you will need to install the build-essential package sudo apt install build-essential clone the project clone the httpbin-wrapper sample project git clone https://github.com/ibmcloudprivate2/httpbin-wrapper.git cd httpbin-wrapper/ npm install create the .env cp .env.sample .env run the test using the .env file to run and test your app locally in the linux vm determine the IP assigned to the vm using multipass list multipass list Name State IPv4 Image linux-vm Running 192.168.64.7 Ubuntu 18.04 LTS login into the vm shell and run node -r dotenv/config server.js output: Your port is: 1323 Running on http:/0.0.0.0:1323 from another terminal or from browser use the following url based on the IP you obtained from multipass list curl http://192.168.64.7:1323/ output: {\"args\":{},\"data\":\"\",\"files\":{},\"form\":{},\"headers\":{\"Accept\":\"application/json\",\"Host\":\"httpbin.org\"},\"origin\":\"121.7.17.203, 121.7.17.203\",\"url\":\"https://httpbin.org/delay/1\"} Your environment is now ready for you to do nodejs development. to exit shell type exit in the multipass linux-vm shell stop the vm multipass stop linux-vm delete and clean vm multipass delete linux-vm multipass purge get help multipass help","title":"Prepare"},{"location":"prepare/#development-environment","text":"Level: Beginner Ensure your development environment has the following docker where you can build, run, push/pull images install node and npm IBM Cloud Private tools install cloudctl install kubectl In this tutorial, we will be doing our docker development on Ubuntun 18.04 and we will create a ubuntu VM on your machine host using multipass. the tutorial can be performed on Mac host too. for Windows users, you will need to install multipass and provision a Ubuntu 18.04 VM with multipass.","title":"Development environment"},{"location":"prepare/#verify-your-setup","text":"node -v npm -v","title":"Verify your setup"},{"location":"prepare/#ubuntu-linux-setup-for-windows","text":"download Windows multipass, head over to here . Installing Multipass for Windows","title":"Ubuntu Linux Setup for Windows"},{"location":"prepare/#ubuntu-linux-setup-for-macs","text":"download Macs multipass, head over to here . to create a default Ubuntu with - name: linux-vm - cpu : 4 cores - memory: 8GB - disk: 40 GB run the following command, and it will create a VM spec as of above. multipass launch -n linux-vm -m 8G -d 40G -c 4","title":"Ubuntu Linux Setup for Macs"},{"location":"prepare/#vm-info","text":"to find info about VMs multipass list","title":"vm info"},{"location":"prepare/#get-into-vm-shell","text":"to access the shell of Ubuntu VM multipass shell linux-vm","title":"get into vm shell"},{"location":"prepare/#install-docker","text":"update existing package sudo apt update && sudo apt upgrade install a few prerequisite packages which let apt use packages over HTTPS sudo apt install apt-transport-https ca-certificates curl software-properties-common add the GPG key for the official Docker repository to your system curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Add the Docker repository to APT sources sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" update the package database with the Docker packages from the newly added repo sudo apt update && sudo apt upgrade Make sure you are about to install from the Docker repo instead of the default Ubuntu repo apt-cache policy docker-ce install Docker sudo apt install docker-ce check Docker status sudo systemctl status docker check docker version docker version add your user for running docker commands sudo usermod -aG docker ${USER} to confirm user has been added id -nG","title":"install docker"},{"location":"prepare/#install-nodejs-and-npm","text":"Install Nodejs from the repositories sudo apt install nodejs Uninstall Nodejs sudo apt remove nodejs we will install nodejs version 10.16.2 we will download a script nodesource_setup.sh for a specific version of nodejs then run the downloaded script where PPA will be added to your configuration and your local package cache will be updated. nodejs package contains the nodejs binary as well as npm, so you don't need to install npm separately. cd ~ curl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh sudo bash nodesource_setup.sh sudo apt install nodejs -y node -v npm -v for some npm packages to work (those that require compiling code from source, for example), you will need to install the build-essential package sudo apt install build-essential","title":"Install Nodejs and NPM"},{"location":"prepare/#clone-the-project","text":"clone the httpbin-wrapper sample project git clone https://github.com/ibmcloudprivate2/httpbin-wrapper.git cd httpbin-wrapper/ npm install create the .env cp .env.sample .env run the test using the .env file to run and test your app locally in the linux vm determine the IP assigned to the vm using multipass list multipass list Name State IPv4 Image linux-vm Running 192.168.64.7 Ubuntu 18.04 LTS login into the vm shell and run node -r dotenv/config server.js output: Your port is: 1323 Running on http:/0.0.0.0:1323 from another terminal or from browser use the following url based on the IP you obtained from multipass list curl http://192.168.64.7:1323/ output: {\"args\":{},\"data\":\"\",\"files\":{},\"form\":{},\"headers\":{\"Accept\":\"application/json\",\"Host\":\"httpbin.org\"},\"origin\":\"121.7.17.203, 121.7.17.203\",\"url\":\"https://httpbin.org/delay/1\"} Your environment is now ready for you to do nodejs development.","title":"clone the project"},{"location":"prepare/#to-exit-shell","text":"type exit in the multipass linux-vm shell","title":"to exit shell"},{"location":"prepare/#stop-the-vm","text":"multipass stop linux-vm","title":"stop the vm"},{"location":"prepare/#delete-and-clean-vm","text":"multipass delete linux-vm multipass purge","title":"delete and clean vm"},{"location":"prepare/#get-help","text":"multipass help","title":"get help"},{"location":"topics/","text":"Introduction We will do a quick overview of the following and have a hands-on of working with a simple application name NodeJS. Containers Kubernetes Microservice Microservice Architecture DevSecOps Resources Code patterns IBM Architecture Center Istio : Connect, secure, control, and observe services. Knative : Kubernetes-based platform to build, deploy, and manage modern serverless workloads. Kabanero : modern microservices-based framework that provides end-to-end solution that enables you to architect, build, deploy, and manage the lifecycle of Kubernetes-based applications Kubernetes Helm Chart Curated application for Kubernetes Singapore Exchange (SGX) IBM Cloud Private Use Case migrating monolith to microservice","title":"Topics"},{"location":"topics/#introduction","text":"We will do a quick overview of the following and have a hands-on of working with a simple application name NodeJS. Containers Kubernetes Microservice Microservice Architecture DevSecOps","title":"Introduction"},{"location":"topics/#resources","text":"Code patterns IBM Architecture Center Istio : Connect, secure, control, and observe services. Knative : Kubernetes-based platform to build, deploy, and manage modern serverless workloads. Kabanero : modern microservices-based framework that provides end-to-end solution that enables you to architect, build, deploy, and manage the lifecycle of Kubernetes-based applications Kubernetes Helm Chart Curated application for Kubernetes Singapore Exchange (SGX) IBM Cloud Private Use Case migrating monolith to microservice","title":"Resources"}]}