{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction a sample tutorial developing nodejs and deploy it to IBM Cloud Private 3.2.0 which is based on Kubernetes.","title":"Introduction"},{"location":"#introduction","text":"a sample tutorial developing nodejs and deploy it to IBM Cloud Private 3.2.0 which is based on Kubernetes.","title":"Introduction"},{"location":"about/","text":"Jaric Sng LinkedIn Acclaim","title":"About"},{"location":"go/","text":"setup go Visit the official Go downloads page and find the URL for the current binary release's tarball, along with its SHA256 hash. cd ~ curl -O https://dl.google.com/go/go1.12.7.linux-amd64.tar.gz sha256sum go1.12.7.linux-amd64.tar.gz extract the tarball tar xvf go1.12.7.linux-amd64.tar.gz Recursively change go's owner and group to root, and move it to /usr/local sudo chown -R root:root ./go sudo mv go /usr/local Note : Although /usr/local/go is the officially-recommended location, some users may prefer or require different paths. set some paths in your environment sudo vi ~/.profile At the end of the file, add this line: export GOPATH=$HOME/work export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin refresh your profile by running source ~/.profile Create a new directory for your Go workspace, which is where Go will build its files mkdir $HOME/work check go version go version create a directory hierarchy in this folder through this command in order for you to create your test file. You can replace the value user with your GitHub username if you plan to use Git to commit and store your Go code on GitHub mkdir -p work/src/github.com/user/hello create a sample \"hello world\" go file. touch ~/work/src/github.com/user/hello/hello.go copy the following into the hello.go file package main import \"fmt\" func main() { fmt.Printf(\"hello, world\\n\") } compile it by invoking the Go command install go install github.com/user/hello With the file compiled, you can run it by simply executing the command hello You can see where the compiled hello binary is installed by using the which command which hello You are all set to develop go.","title":"go"},{"location":"go/#setup-go","text":"Visit the official Go downloads page and find the URL for the current binary release's tarball, along with its SHA256 hash. cd ~ curl -O https://dl.google.com/go/go1.12.7.linux-amd64.tar.gz sha256sum go1.12.7.linux-amd64.tar.gz extract the tarball tar xvf go1.12.7.linux-amd64.tar.gz Recursively change go's owner and group to root, and move it to /usr/local sudo chown -R root:root ./go sudo mv go /usr/local Note : Although /usr/local/go is the officially-recommended location, some users may prefer or require different paths. set some paths in your environment sudo vi ~/.profile At the end of the file, add this line: export GOPATH=$HOME/work export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin refresh your profile by running source ~/.profile Create a new directory for your Go workspace, which is where Go will build its files mkdir $HOME/work check go version go version create a directory hierarchy in this folder through this command in order for you to create your test file. You can replace the value user with your GitHub username if you plan to use Git to commit and store your Go code on GitHub mkdir -p work/src/github.com/user/hello create a sample \"hello world\" go file. touch ~/work/src/github.com/user/hello/hello.go copy the following into the hello.go file package main import \"fmt\" func main() { fmt.Printf(\"hello, world\\n\") } compile it by invoking the Go command install go install github.com/user/hello With the file compiled, you can run it by simply executing the command hello You can see where the compiled hello binary is installed by using the which command which hello You are all set to develop go.","title":"setup go"},{"location":"hands-on/","text":"The hands-on tutorial will covers different programming languages over times. Currently, it includes the following where you will learn to build docker image and push to a Kubernetes cluster, IBM Cloud Private. The concept you learnt here is equally applicable in other Kubernetes platform. nodejs","title":"Hands on"},{"location":"java/","text":"","title":"Java"},{"location":"loopback/","text":"Loopback 4 to develop loopback 4 you will need nodejs and npm, ensure you have both nodejs and npm installed, refer to nodejs setup . Install LoopBack 4 CLI sudo npm install -g @loopback/cli creaet a loopback project lb4 app answer the prompt as follows [?] Project name: getting-started [?] Project description: Getting started tutorial [?] Project root directory: (getting-started) [?] Application class name: StarterApplication [?] Select project build settings: Enable eslint, Enable prettier, Enable mocha, Enable loopbackBuild test the proejct cd getting-started npm start your own controller lb4 controller [?] Controller class name: hello [?] What kind of controller would you like to generate? Empty Controller create src/controllers/hello.controller.ts update src/controllers/index.ts Controller Hello was now created in src/controllers/ Paste the following contents into the file /src/controllers/hello.controller.ts. import {get} from '@loopback/rest'; export class HelloController { @get('/hello') hello(): string { return 'Hello world!'; } } Test your application npm start access http://192.168.64.7:3000/hello with your browser and you should see \" Hello world! \". checkout getting started on loopback.","title":"loopback"},{"location":"loopback/#loopback-4","text":"to develop loopback 4 you will need nodejs and npm, ensure you have both nodejs and npm installed, refer to nodejs setup . Install LoopBack 4 CLI sudo npm install -g @loopback/cli creaet a loopback project lb4 app answer the prompt as follows [?] Project name: getting-started [?] Project description: Getting started tutorial [?] Project root directory: (getting-started) [?] Application class name: StarterApplication [?] Select project build settings: Enable eslint, Enable prettier, Enable mocha, Enable loopbackBuild test the proejct cd getting-started npm start your own controller lb4 controller [?] Controller class name: hello [?] What kind of controller would you like to generate? Empty Controller create src/controllers/hello.controller.ts update src/controllers/index.ts Controller Hello was now created in src/controllers/ Paste the following contents into the file /src/controllers/hello.controller.ts. import {get} from '@loopback/rest'; export class HelloController { @get('/hello') hello(): string { return 'Hello world!'; } } Test your application npm start access http://192.168.64.7:3000/hello with your browser and you should see \" Hello world! \". checkout getting started on loopback.","title":"Loopback 4"},{"location":"nodejs/","text":"Introduction In this hands on exercise, you will learn how to build a docker image how to push an image to a private repo how to deploy an container in kubernetes platform About the application this is a nodejs application that calls httpbin.org API and you can then use Clone the project which contains the nodeJS that call service in httpbin.org On your machine ensure you have your pre-requisite installed Install Nodejs and NPM Install Nodejs from the repositories sudo apt install nodejs Uninstall Nodejs sudo apt remove nodejs we will install nodejs version 10.16.2 we will download a script nodesource_setup.sh for a specific version of nodejs then run the downloaded script where PPA will be added to your configuration and your local package cache will be updated. nodejs package contains the nodejs binary as well as npm, so you don't need to install npm separately. cd ~ curl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh sudo bash nodesource_setup.sh sudo apt install nodejs -y node -v npm -v for some npm packages to work (those that require compiling code from source, for example), you will need to install the build-essential package sudo apt install build-essential test the application npm install npm test build the image docker build . -t <image-name>:<image-tag> test the image docker run -e CONTAINER_PORT='3000' -e TARGET_URL='https://httpbin.org/' -e TARGET_URI='delay/1' -p 5000:3000 js-httpbin:2.0 <image-name>:<image-tag> tag the image for ICP docker tag js-httpbin:2.0 mycluster.icp:8500/<namespace>/<image-name>:<image-tag> push the image to kubernetes platform edit /etc/hosts to map mycluster.icp to ICP IP address and configure docker to use insecure login docker login mycluster.icp:8500 docker push mycluster.icp:8500/<namespace>/<image-name>:<image-tag> run the image kubectl apply -f ./k8s/httpbin.yaml Further exercise modify the application tag image new version test it push image to kubernetes platform scale it update the application to new version of image rollback","title":"nodejs"},{"location":"nodejs/#introduction","text":"In this hands on exercise, you will learn how to build a docker image how to push an image to a private repo how to deploy an container in kubernetes platform","title":"Introduction"},{"location":"nodejs/#about-the-application","text":"this is a nodejs application that calls httpbin.org API and you can then use Clone the project which contains the nodeJS that call service in httpbin.org","title":"About the application"},{"location":"nodejs/#on-your-machine","text":"ensure you have your pre-requisite installed","title":"On your machine"},{"location":"nodejs/#install-nodejs-and-npm","text":"Install Nodejs from the repositories sudo apt install nodejs Uninstall Nodejs sudo apt remove nodejs we will install nodejs version 10.16.2 we will download a script nodesource_setup.sh for a specific version of nodejs then run the downloaded script where PPA will be added to your configuration and your local package cache will be updated. nodejs package contains the nodejs binary as well as npm, so you don't need to install npm separately. cd ~ curl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh sudo bash nodesource_setup.sh sudo apt install nodejs -y node -v npm -v for some npm packages to work (those that require compiling code from source, for example), you will need to install the build-essential package sudo apt install build-essential test the application npm install npm test build the image docker build . -t <image-name>:<image-tag> test the image docker run -e CONTAINER_PORT='3000' -e TARGET_URL='https://httpbin.org/' -e TARGET_URI='delay/1' -p 5000:3000 js-httpbin:2.0 <image-name>:<image-tag> tag the image for ICP docker tag js-httpbin:2.0 mycluster.icp:8500/<namespace>/<image-name>:<image-tag> push the image to kubernetes platform edit /etc/hosts to map mycluster.icp to ICP IP address and configure docker to use insecure login docker login mycluster.icp:8500 docker push mycluster.icp:8500/<namespace>/<image-name>:<image-tag> run the image kubectl apply -f ./k8s/httpbin.yaml","title":"Install Nodejs and NPM"},{"location":"nodejs/#further-exercise","text":"modify the application tag image new version test it push image to kubernetes platform scale it update the application to new version of image rollback","title":"Further exercise"},{"location":"php/","text":"","title":"Php"},{"location":"prepare/","text":"Development environment Level: Beginner Ensure your development environment has the following docker where you can build, run, push/pull images install node and npm IBM Cloud Private tools install cloudctl install kubectl In this tutorial, we will be doing our docker development on Ubuntun 18.04 and we will create a ubuntu VM on your machine host using multipass. the tutorial can be performed on Mac host too. for Windows users, you will need to install multipass and provision a Ubuntu 18.04 VM with multipass. Verify your setup node -v npm -v Ubuntu Linux Setup for Windows download Windows multipass, head over to here . Installing Multipass for Windows Ubuntu Linux Setup for Macs download Macs multipass, head over to here . to create a default Ubuntu with - name: linux-vm - cpu : 4 cores - memory: 8GB - disk: 40 GB run the following command, and it will create a VM spec as of above. multipass launch -n linux-vm -m 8G -d 40G -c 4 vm info to find info about VMs multipass list get into vm shell to access the shell of Ubuntu VM multipass shell linux-vm install docker update existing package sudo apt update && sudo apt upgrade install a few prerequisite packages which let apt use packages over HTTPS sudo apt install apt-transport-https ca-certificates curl software-properties-common add the GPG key for the official Docker repository to your system curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Add the Docker repository to APT sources sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" update the package database with the Docker packages from the newly added repo sudo apt update && sudo apt upgrade Make sure you are about to install from the Docker repo instead of the default Ubuntu repo apt-cache policy docker-ce install Docker sudo apt install docker-ce check Docker status sudo systemctl status docker check docker version docker version add your user for running docker commands sudo usermod -aG docker ${USER} to confirm user has been added id -nG Configure Docker insecure repo Edit /etc/docker/daemon.json and update the key \"insecure-registries\" { \"insecure-registries\" : [\"mycluster.icp:8500\"] } restart docker sudo systemctl restart docker test login to ICP docker repo, you will need to edit and update your /etc/hosts file to map your ICP 192.168.0.5 to mycluster.icp sample /etc/hosts # Your system has configured 'manage_etc_hosts' as True. # As a result, if you wish for changes to this file to persist # then you will need to either # a.) make changes to the master file in /etc/cloud/templates/hosts.debian.tmpl # b.) change or remove the value of 'manage_etc_hosts' in # /etc/cloud/cloud.cfg or cloud-config from user-data # 127.0.1.1 linux-vm linux-vm 127.0.0.1 localhost 192.168.0.5 mycluster.icp # The following lines are desirable for IPv6 capable hosts ::1 ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters ff02::3 ip6-allhosts docker login mycluster.icp:8500 clone the project clone the httpbin-wrapper sample project git clone https://github.com/ibmcloudprivate2/httpbin-wrapper.git cd httpbin-wrapper/ npm install create the .env cp .env.sample .env run the test using the .env file to run and test your app locally in the linux vm determine the IP assigned to the vm using multipass list multipass list Name State IPv4 Image linux-vm Running 192.168.64.7 Ubuntu 18.04 LTS login into the vm shell and run node -r dotenv/config server.js output: Your port is: 1323 Running on http:/0.0.0.0:1323 from another terminal or from browser use the following url based on the IP you obtained from multipass list curl http://192.168.64.7:1323/ output: {\"args\":{},\"data\":\"\",\"files\":{},\"form\":{},\"headers\":{\"Accept\":\"application/json\",\"Host\":\"httpbin.org\"},\"origin\":\"121.7.17.203, 121.7.17.203\",\"url\":\"https://httpbin.org/delay/1\"} Your environment is now ready for you to do nodejs development. to exit shell type exit in the multipass linux-vm shell stop the vm multipass stop linux-vm delete and clean vm multipass delete linux-vm multipass purge get help multipass help","title":"Prepare"},{"location":"prepare/#development-environment","text":"Level: Beginner Ensure your development environment has the following docker where you can build, run, push/pull images install node and npm IBM Cloud Private tools install cloudctl install kubectl In this tutorial, we will be doing our docker development on Ubuntun 18.04 and we will create a ubuntu VM on your machine host using multipass. the tutorial can be performed on Mac host too. for Windows users, you will need to install multipass and provision a Ubuntu 18.04 VM with multipass.","title":"Development environment"},{"location":"prepare/#verify-your-setup","text":"node -v npm -v","title":"Verify your setup"},{"location":"prepare/#ubuntu-linux-setup-for-windows","text":"download Windows multipass, head over to here . Installing Multipass for Windows","title":"Ubuntu Linux Setup for Windows"},{"location":"prepare/#ubuntu-linux-setup-for-macs","text":"download Macs multipass, head over to here . to create a default Ubuntu with - name: linux-vm - cpu : 4 cores - memory: 8GB - disk: 40 GB run the following command, and it will create a VM spec as of above. multipass launch -n linux-vm -m 8G -d 40G -c 4","title":"Ubuntu Linux Setup for Macs"},{"location":"prepare/#vm-info","text":"to find info about VMs multipass list","title":"vm info"},{"location":"prepare/#get-into-vm-shell","text":"to access the shell of Ubuntu VM multipass shell linux-vm","title":"get into vm shell"},{"location":"prepare/#install-docker","text":"update existing package sudo apt update && sudo apt upgrade install a few prerequisite packages which let apt use packages over HTTPS sudo apt install apt-transport-https ca-certificates curl software-properties-common add the GPG key for the official Docker repository to your system curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Add the Docker repository to APT sources sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" update the package database with the Docker packages from the newly added repo sudo apt update && sudo apt upgrade Make sure you are about to install from the Docker repo instead of the default Ubuntu repo apt-cache policy docker-ce install Docker sudo apt install docker-ce check Docker status sudo systemctl status docker check docker version docker version add your user for running docker commands sudo usermod -aG docker ${USER} to confirm user has been added id -nG","title":"install docker"},{"location":"prepare/#configure-docker-insecure-repo","text":"Edit /etc/docker/daemon.json and update the key \"insecure-registries\" { \"insecure-registries\" : [\"mycluster.icp:8500\"] } restart docker sudo systemctl restart docker test login to ICP docker repo, you will need to edit and update your /etc/hosts file to map your ICP 192.168.0.5 to mycluster.icp sample /etc/hosts # Your system has configured 'manage_etc_hosts' as True. # As a result, if you wish for changes to this file to persist # then you will need to either # a.) make changes to the master file in /etc/cloud/templates/hosts.debian.tmpl # b.) change or remove the value of 'manage_etc_hosts' in # /etc/cloud/cloud.cfg or cloud-config from user-data # 127.0.1.1 linux-vm linux-vm 127.0.0.1 localhost 192.168.0.5 mycluster.icp # The following lines are desirable for IPv6 capable hosts ::1 ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters ff02::3 ip6-allhosts docker login mycluster.icp:8500","title":"Configure Docker insecure repo"},{"location":"prepare/#clone-the-project","text":"clone the httpbin-wrapper sample project git clone https://github.com/ibmcloudprivate2/httpbin-wrapper.git cd httpbin-wrapper/ npm install create the .env cp .env.sample .env run the test using the .env file to run and test your app locally in the linux vm determine the IP assigned to the vm using multipass list multipass list Name State IPv4 Image linux-vm Running 192.168.64.7 Ubuntu 18.04 LTS login into the vm shell and run node -r dotenv/config server.js output: Your port is: 1323 Running on http:/0.0.0.0:1323 from another terminal or from browser use the following url based on the IP you obtained from multipass list curl http://192.168.64.7:1323/ output: {\"args\":{},\"data\":\"\",\"files\":{},\"form\":{},\"headers\":{\"Accept\":\"application/json\",\"Host\":\"httpbin.org\"},\"origin\":\"121.7.17.203, 121.7.17.203\",\"url\":\"https://httpbin.org/delay/1\"} Your environment is now ready for you to do nodejs development.","title":"clone the project"},{"location":"prepare/#to-exit-shell","text":"type exit in the multipass linux-vm shell","title":"to exit shell"},{"location":"prepare/#stop-the-vm","text":"multipass stop linux-vm","title":"stop the vm"},{"location":"prepare/#delete-and-clean-vm","text":"multipass delete linux-vm multipass purge","title":"delete and clean vm"},{"location":"prepare/#get-help","text":"multipass help","title":"get help"},{"location":"python/","text":"setup python environment ubuntu comes with python3 by default, to check the version run the following command python3 -V in order to use different python environment for different project, the recommended way to create a virtual environment is to use the venv module, install as follow sudo apt install python3-venv -y Create a new directory for your Flask application and navigate into it mkdir my_flask_app cd my_flask_app Once inside the directory, run the following command to create your new virtual environment python3 -m venv venv The command above creates a directory called venv, which contains a copy of the Python binary, the Pip package manager, the standard Python library and other supporting files. You can use any name you want for the virtual environment. To start using this virtual environment, you need to activate it by running the activate script: source venv/bin/activate install Flask Now that the virtual environment is activated, you can use the Python package manager pip to install Flask pip install Flask Verify the installation with the following command which will print the Flask version python -m flask --version create a \"hello world\" flask app, hello.py touch hello.py enter the following content into hello.py from flask import Flask app = Flask(__name__) @app.route(\"/\") def greeting(): return \"<h1 style='color:green'>Hello World!</h1>\" if __name__ == \"__main__\": app.run(host='0.0.0.0') Testing the app python3 hello.py to test with browser, find your multipass VM IP, from another terminal, run multipass list sample Name State IPv4 Image linux-vm Running 192.168.64.7 Ubuntu 18.04 LTS use the browser and access http://192.168.64.7:5000 to serve as the site, we can use Gunicorn and then setup a WSGI Entry Point. pip install gunicorn create a WSGI entry point touch wsgi.py copy the following content into wsgi.py from hello import app if __name__ == \"__main__\": app.run() start the server gunicorn --bind 0.0.0.0:5000 wsgi:app Once you are done with your work, deactivate the environment, by typing deactivate and you will return to your normal shell. deactivate","title":"python flask"},{"location":"python/#setup-python-environment","text":"ubuntu comes with python3 by default, to check the version run the following command python3 -V in order to use different python environment for different project, the recommended way to create a virtual environment is to use the venv module, install as follow sudo apt install python3-venv -y Create a new directory for your Flask application and navigate into it mkdir my_flask_app cd my_flask_app Once inside the directory, run the following command to create your new virtual environment python3 -m venv venv The command above creates a directory called venv, which contains a copy of the Python binary, the Pip package manager, the standard Python library and other supporting files. You can use any name you want for the virtual environment. To start using this virtual environment, you need to activate it by running the activate script: source venv/bin/activate","title":"setup python environment"},{"location":"python/#install-flask","text":"Now that the virtual environment is activated, you can use the Python package manager pip to install Flask pip install Flask Verify the installation with the following command which will print the Flask version python -m flask --version create a \"hello world\" flask app, hello.py touch hello.py enter the following content into hello.py from flask import Flask app = Flask(__name__) @app.route(\"/\") def greeting(): return \"<h1 style='color:green'>Hello World!</h1>\" if __name__ == \"__main__\": app.run(host='0.0.0.0') Testing the app python3 hello.py to test with browser, find your multipass VM IP, from another terminal, run multipass list sample Name State IPv4 Image linux-vm Running 192.168.64.7 Ubuntu 18.04 LTS use the browser and access http://192.168.64.7:5000 to serve as the site, we can use Gunicorn and then setup a WSGI Entry Point. pip install gunicorn create a WSGI entry point touch wsgi.py copy the following content into wsgi.py from hello import app if __name__ == \"__main__\": app.run() start the server gunicorn --bind 0.0.0.0:5000 wsgi:app Once you are done with your work, deactivate the environment, by typing deactivate and you will return to your normal shell. deactivate","title":"install Flask"},{"location":"spring/","text":"","title":"Spring"},{"location":"swift/","text":"","title":"Swift"},{"location":"topics/","text":"Introduction We will do a quick overview of the following and have a hands-on of working with a simple application name NodeJS. Containers Kubernetes Microservice Microservice Architecture DevSecOps Resources Code patterns IBM Architecture Center Istio : Connect, secure, control, and observe services. Knative : Kubernetes-based platform to build, deploy, and manage modern serverless workloads. Kabanero : modern microservices-based framework that provides end-to-end solution that enables you to architect, build, deploy, and manage the lifecycle of Kubernetes-based applications Kubernetes Helm Chart Curated application for Kubernetes Singapore Exchange (SGX) IBM Cloud Private Use Case migrating monolith to microservice","title":"Topics"},{"location":"topics/#introduction","text":"We will do a quick overview of the following and have a hands-on of working with a simple application name NodeJS. Containers Kubernetes Microservice Microservice Architecture DevSecOps","title":"Introduction"},{"location":"topics/#resources","text":"Code patterns IBM Architecture Center Istio : Connect, secure, control, and observe services. Knative : Kubernetes-based platform to build, deploy, and manage modern serverless workloads. Kabanero : modern microservices-based framework that provides end-to-end solution that enables you to architect, build, deploy, and manage the lifecycle of Kubernetes-based applications Kubernetes Helm Chart Curated application for Kubernetes Singapore Exchange (SGX) IBM Cloud Private Use Case migrating monolith to microservice","title":"Resources"}]}